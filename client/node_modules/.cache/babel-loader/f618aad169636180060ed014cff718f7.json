{"ast":null,"code":"import { decodeToken } from \"react-jwt\";\nimport Cookies from 'js-cookie';\nexport default function isAuth() {\n  const accessToken = Cookies.get('accessToken');\n  const refreshToken = Cookies.get('refreshToken');\n  console.log({\n    accessToken,\n    refreshToken\n  });\n\n  if (!accessToken || !refreshToken) {\n    return false;\n  } //decode token \n\n\n  try {\n    //check expires \n    const {\n      exp\n    } = decodeToken(refreshToken);\n    console.log(exp);\n    console.log(new Date().getTime());\n\n    if (exp < new Date().getTime()) {\n      console.log('not expires');\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/Đồ án chuyên nghành/client/src/components/functions/isAuth.jsx"],"names":["decodeToken","Cookies","isAuth","accessToken","get","refreshToken","console","log","exp","Date","getTime","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,WAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,eAAe,SAASC,MAAT,GAAiB;AAC5B,QAAMC,WAAW,GAAGF,OAAO,CAACG,GAAR,CAAY,aAAZ,CAApB;AACA,QAAMC,YAAY,GAAGJ,OAAO,CAACG,GAAR,CAAY,cAAZ,CAArB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,IAAAA,WAAD;AAAeE,IAAAA;AAAf,GAAZ;;AAEA,MAAG,CAACF,WAAD,IAAgB,CAACE,YAApB,EAAkC;AAC/B,WAAO,KAAP;AACF,GAP2B,CAQ5B;;;AACA,MAAI;AACF;AACA,UAAM;AAACG,MAAAA;AAAD,QAAQR,WAAW,CAACK,YAAD,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAIE,IAAJ,GAAWC,OAAX,EAAZ;;AACA,QAAGF,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAT,EAA8B;AAC5BJ,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAO,KAAP;AACD;AACF,GATD,CASE,OAAOI,KAAP,EAAc;AACd,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACH","sourcesContent":["import { decodeToken } from \"react-jwt\"\r\nimport Cookies from 'js-cookie'\r\nexport default function isAuth(){\r\n    const accessToken = Cookies.get('accessToken');\r\n    const refreshToken = Cookies.get('refreshToken');\r\n    console.log({accessToken , refreshToken})\r\n\r\n    if(!accessToken || !refreshToken ){\r\n       return false;\r\n    }\r\n    //decode token \r\n    try {\r\n      //check expires \r\n      const {exp} = decodeToken(refreshToken) ;\r\n      console.log(exp) \r\n      console.log(new Date().getTime())\r\n      if(exp < new Date().getTime()){\r\n        console.log('not expires')\r\n        return false;\r\n      } \r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}