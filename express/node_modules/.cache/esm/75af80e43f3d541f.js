let ApolloError,AuthenticationError,error,Shift,Employee;_3f3‍.x([["default",()=>_3f3‍.o]]);_3f3‍.w("apollo-server-express",[["ApolloError",["ApolloError"],function(v){ApolloError=v}],["AuthenticationError",["AuthenticationError"],function(v){AuthenticationError=v}]]);_3f3‍.w("consola",[["error",["error"],function(v){error=v}]]);_3f3‍.w("../../models/Shift",[["default",["Shift"],function(v){Shift=v}]]);_3f3‍.w("../../models/Employee",[["default",["Employee"],function(v){Employee=v}]]);




_3f3‍.d({
  Query: {
    getAllShifts: async (_, args, { req }) => {
      //check req has "Authorize"
      //req.admin
      if (!req.isAuth) {
        throw new AuthenticationError(`U must be login`);
      }
      try {
        let rs = await Shift.find();
        // console.log(rs);
        return rs;
      } catch (error) {
        throw new ApolloError(error);
      }
    },
    // ✅
    getShiftById: async (_, { id }, { req }) => {
      //check req has "Authorize"
      //req.user
      if (!req.isAuth) throw new AuthenticationError(`U must be login`);

      const shift = await Shift.findById(id);
      shift
        ? () => {
            return shift;
          }
        : () => {
            throw new ApolloError(` Cannot find shift `);
          };
    },
    // ✅
  },
  Mutation: {
    addShift: async (_, { newShift }, { req }) => {
      //check req has "Authorize"
      //req.admin
      if (!req.isAuth) throw new AuthenticationError(`U must be login`);
      if (!req.admin)
        throw new AuthenticationError(
          `U dont have permission to do this action`
        );
      let { name } = newShift;
      let shift = await Shift.findOne({ name });
      if (shift) throw new ApolloError("Name cannot be same !");
      newShift = {
        ...newShift,
        employees: [],
      };
      shift = new Shift(newShift);
      try {
        // console.log(shift._doc);
        let rs = await shift.save();
        return rs;
      } catch (error) {
        throw new ApolloError(error);
      }
    },
    // ✅
    deleteShift: async (_, { id }, { req }) => {
      //check req has "Authorize"
      //req.admin
      if (!req.isAuth) throw new AuthenticationError(`U must be login`);
      if (!req.admin)
        throw new AuthenticationError(
          `U dont have permission to do this action`
        );
      try {
        let deleteShift = await Shift.findByIdAndDelete({ _id: id });
        if (!deleteShift) throw new ApolloError(" Cannot delete ");
        return true;
      } catch (error) {
        throw new ApolloError(error);
      }
    },
    // ✅
    signUpShift: async (_, { idShift, idEmployee }, { req }) => {
      //check req has "Authorize"
      if (!req.isAuth) throw new AuthenticationError(`U must be login`);

      let employee = await Employee.findById(idEmployee);
      // console.log(employee);
      if (!employee) throw new ApolloError("Cannot find employee");

      employee._id = employee.id;
      const shift = Shift.findByIdAndUpdate(
        idShift,
        {
          $set: {
            employees: () => {
              let arr = [...employees];
              let foo = arr.filter((item) => item.id != employee.id);
              const rs = [...foo, employee];
              return rs;
            },
          },
        },
        (err, res) => {
          if (err) throw new ApolloError(err);
          // return shift;
        }
      );
      // console.log(shift);
      return shift;
      // console.log(employee);
      // console.log(shift);
    },
  },
});
//remember export to root file
