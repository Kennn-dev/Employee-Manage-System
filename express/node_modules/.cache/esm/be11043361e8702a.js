let Employee,sign,verify,compare,hash,error,totp,SECRETKEY,ApolloError,AuthenticationError;_61e‍.x([["default",()=>_61e‍.o]]);_61e‍.w("../../models/Employee",[["default",["Employee"],function(v){Employee=v}]]);_61e‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}],["verify",["verify"],function(v){verify=v}]]);_61e‍.w("bcrypt",[["compare",["compare"],function(v){compare=v}],["hash",["hash"],function(v){hash=v}]]);_61e‍.w("consola",[["error",["error"],function(v){error=v}]]);_61e‍.w("otplib",[["totp",["totp"],function(v){totp=v}]]);_61e‍.w("../../config/index",[["SECRETKEY",["SECRETKEY"],function(v){SECRETKEY=v}]]);_61e‍.w("apollo-server-express",[["ApolloError",["ApolloError"],function(v){ApolloError=v}],["AuthenticationError",["AuthenticationError"],function(v){AuthenticationError=v}]]);
// import { ApolloError } from "apollo-server-express";





// import { getUser } from "../../functions/index";



_61e‍.d({
  Query: {
    getProfileEmpById: async (_, { id }, { req }) => {
      try {
        //check req has "Authorize"
        //req.user
        if (!req.isAuth) throw new Error(`U must be login`);
        const employee = await Employee.findById(id);
        if (employee) {
          return {
            employee,
          };
        } else {
          throw new Error("Cant find employee");
        }
      } catch (err) {
        error({
          badge: true,
          message: err.message,
        });
      }
    },
  },
  Mutation: {
    loginEmployee: async (_, { username, password }, { res }, info) => {
      try {
        //check username ,
        const user = await Employee.findOne({ username });
        if (!user) {
          throw new Error(" Username is not valid ", 402);
        }
        //check password.
        const hash = await compare(password, user.password);
        if (hash != true) {
          throw new Error(" Password doesn't match ! ", 402);
        }

        // send token
        const accessToken = sign(
          {
            id: user._doc._id,
            ...user._doc,
          },
          SECRETKEY,
          { expiresIn: 60 * 60 * 24 }
        );

        ////
        res.cookie("accessToken", accessToken, { expiresIn: 60 * 60 * 24 });
        return {
          id: user._id,
          position: user.position,
          username: user.username,
          token: accessToken,
        };
      } catch (err) {
        error({
          badge: true,
          message: err.message,
        });
      }
    },
    changePasswordEmp: async (_, { changePassword }, { req }) => {
      // try {
      //check req has "Authorize"
      //req.user
      if (!req.isAuth) throw new AuthenticationError(`U must be login`);
      if (!req.user)
        throw new AuthenticationError(
          `U dont have permission to do this action`
        );

      const { oldPassword, newPassword, confirmPassword } = changePassword;
      const userData = req.user;
      const id = userData._id;

      //compare 2 newPasswords
      let confirm = newPassword.localeCompare(confirmPassword); // equal = 0
      if (confirm !== 0)
        throw new ApolloError(`Password confirm doesn't match`);

      //compare old password with password in userData
      let comparePass = await compare(oldPassword, userData.password);
      if (!comparePass)
        throw new ApolloError(`Your old password doesn't match`);
      let hashPass = await hash(newPassword, 12);

      const user = await Employee.findByIdAndUpdate(
        { _id: id },
        {
          password: hashPass,
        }
      );
      if (!user) throw new ApolloError(`Cannot update`);
      return {
        message: "Update succesfully",
        success: true,
      };
      // } catch (err) {
      //   error({
      //     badge: true,
      //     message: err.message,
      //   });
      // }
    },
  },
});

//remember export to root file
