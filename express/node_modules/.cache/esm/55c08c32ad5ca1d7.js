let express,mongoose,bodyParser,gql,ApolloServer,success,error,cookieParser,typeDefs,resolvers,authMiddleWare;_ad5‍.w("express",[["default",["express"],function(v){express=v}]]);_ad5‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_ad5‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_ad5‍.w("apollo-server-express",[["gql",["gql"],function(v){gql=v}],["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_ad5‍.w("consola",[["success",["success"],function(v){success=v}],["error",["error"],function(v){error=v}]]);_ad5‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_ad5‍.w("./graphql",[["typeDefs",["typeDefs"],function(v){typeDefs=v}],["resolvers",["resolvers"],function(v){resolvers=v}]]);_ad5‍.w("./middlewares/auth",[["default",["authMiddleWare"],function(v){authMiddleWare=v}]]);






// Construct a schema, using GraphQL schema language



//app
const app = express();
app.use(authMiddleWare);
app.use(bodyParser.json());
app.use(cookieParser());

//server Apl
const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: ({ res, req }) => {
    return {
      req,
      res,
    };
  },
});

const PORT = 4000;

const startApp = async () => {
  try {
    //connect to db here
    await mongoose.connect(
      "mongodb+srv://ken101299:1234@coffee-employee-mng.wi3ud.mongodb.net/coffee?retryWrites=true&w=majority",
      {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        useFindAndModify: false,
        useCreateIndex: true,
      }
    );
    success({
      badge: true,
      message: `MongoDB connected `,
    });

    // Inject apollo middleware on Express Application
    server.applyMiddleware({ app });
    app.listen(PORT, () => {
      success({
        badge: true,
        message: `Server start at ${PORT}`,
      });
    });
  } catch (err) {
    error({
      message: err.message,
      badge: true,
    });
  }
};

startApp();
