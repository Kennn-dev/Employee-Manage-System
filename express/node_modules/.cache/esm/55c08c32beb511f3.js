let express,mongoose,bodyParser,ApolloServer,success,error,cors,cookieParser,typeDefs,resolvers,authMiddleWare;_beb‍.w("express",[["default",["express"],function(v){express=v}]]);_beb‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_beb‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_beb‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_beb‍.w("consola",[["success",["success"],function(v){success=v}],["error",["error"],function(v){error=v}]]);_beb‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_beb‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_beb‍.w("./graphql",[["typeDefs",["typeDefs"],function(v){typeDefs=v}],["resolvers",["resolvers"],function(v){resolvers=v}]]);_beb‍.w("./middlewares/auth",[["default",["authMiddleWare"],function(v){authMiddleWare=v}]]);







// Construct a schema, using GraphQL schema language



//app
const app = express();
// app.use(cors());

app.use(bodyParser.json());
app.use(cookieParser());
app.use(authMiddleWare);
const corsOptions = {
  origin: "http://localhost:3000",
  credentials: true,
};
//server Apl
const server = new ApolloServer({
  typeDefs,
  resolvers,
  // cors: corsOptions,
  context: ({ res, req }) => {
    // console.log(req.cookies);
    return {
      req,
      res,
    };
  },
});
// //get cookies from request
// app.use((req, _, next) => {
//   console.log(req.cookies);
//   next();
// });

const PORT = 4000;

const startApp = async () => {
  try {
    //connect to db here
    await mongoose.connect(
      "mongodb+srv://ken101299:1234@coffee-employee-mng.wi3ud.mongodb.net/coffee?retryWrites=true&w=majority",
      {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        useFindAndModify: false,
        useCreateIndex: true,
      }
    );
    success({
      badge: true,
      message: `MongoDB connected `,
    });

    // Inject apollo middleware on Express Application
    server.applyMiddleware({
      app,
      cors: {
        credentials: true,
        origin: "http://localhost:3000",
      },
    });

    app.listen(PORT, () => {
      success({
        badge: true,
        message: `Server start at ${PORT}`,
      });
    });
  } catch (err) {
    error({
      message: err.message,
      badge: true,
    });
  }
};

startApp();
