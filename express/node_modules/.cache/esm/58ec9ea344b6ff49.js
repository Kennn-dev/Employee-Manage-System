let Employee,Admin,ApolloError,sign,verify,error,compare,hash,SECRETKEY;_44b‍.x([["default",()=>_44b‍.o]]);_44b‍.w("../../models/Employee",[["default",["Employee"],function(v){Employee=v}]]);_44b‍.w("../../models/Admin",[["default",["Admin"],function(v){Admin=v}]]);_44b‍.w("apollo-server-express",[["ApolloError",["ApolloError"],function(v){ApolloError=v}]]);_44b‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}],["verify",["verify"],function(v){verify=v}]]);_44b‍.w("consola",[["error",["error"],function(v){error=v}]]);_44b‍.w("bcrypt",[["compare",["compare"],function(v){compare=v}],["hash",["hash"],function(v){hash=v}]]);_44b‍.w("../../config/index",[["SECRETKEY",["SECRETKEY"],function(v){SECRETKEY=v}]]);









_44b‍.d({
  Query: {
    getAllEmployees: async (_, args, { req }, info) => {
      try {
        //check req has "Authorize"
        //req.admin
        if (!req.isAuth) throw new Error(`U must be login`);
        if (!req.admin)
          throw new Error(`U dont have permission to do this action`);
        let result = await Employee.find();
        return result;
        // }
      } catch (err) {
        error({
          badge: true,
          message: err.message,
        });
      }
    },
    getEmployeeById: async (_, { id }, { req }, info) => {
      try {
        //check req has "Authorize"
        //req.admin
        //req.user
        if (!req.isAuth) throw new Error(`U must be login`);
        let result = await Employee.findById(id);
        return result;
        // }
      } catch (err) {
        error({
          badge: true,
          message: err.message,
        });
      }
    },
  },

  Mutation: {
    createAdmin: async (_, { username, password }, { req }) => {
      try {
        //check req has "Authorize"
        //req.admin
        if (!req.isAuth) throw new Error(`U must be login`);
        if (!req.admin)
          throw new Error(`U dont have permission to do this action`);
        let newAdmin = {
          username,
          password,
          position: "Admin",
        };
        let admin = await Admin.findOne({ username });
        if (admin) throw new Error("Username has taken");

        admin = new Admin(newAdmin);
        admin.password = await hash(newAdmin.password, 12);

        let result = await admin.save();

        if (result) {
          return {
            id: result._id,
            username: result.username,
            position: result.position,
          };
        }
      } catch (err) {
        error({
          badge: true,
          message: err.message,
        });
      }
    },
    loginAdmin: async (_, { username, password }, { res }, info) => {
      try {
        //check username ,
        const user = await Admin.findOne({ username });
        if (!user) {
          throw new Error(" Username is not found ", 402);
        }
        //check password.
        const hash = await compare(password, user.password);
        if (hash != true) {
          throw new Error(" Password doesn't match ! ", 402);
        }
        // send token
        const accessToken = sign(
          {
            id: user._id,
            position: user.position,
            username: user.username,
          },
          SECRETKEY,
          { expiresIn: 60 * 60 * 24 }
        );

        ////
        res.cookie("accessToken", accessToken, { expiresIn: 60 * 60 * 24 });
        return {
          id: user._id,
          position: user.position,
          username: user.username,
          token: accessToken,
        };
      } catch (err) {
        error({
          badge: true,
          message: err.message,
        });
      }
    },
    createNewEmployee: async (_, { newEmployee }, { req }, info) => {
      try {
        //check req has "Authorize"
        //req.admin
        if (!req.isAuth) throw new Error(`U must be login`);
        if (!req.admin)
          throw new Error(`U dont have permission to do this action`);
        //check the username has taken
        let { username, email, password } = newEmployee;
        let employee = await Employee.findOne({ username });
        if (employee) {
          throw new Error(" Username has taken ");
        }
        employee = await Employee.findOne({ email });
        if (employee) {
          throw new Error(" Email has taken ");
        }

        employee = new Employee(newEmployee);
        employee.password = await hash(password, 12);

        const result = await employee.save();
        return result;
        // }
      } catch (err) {
        throw new ApolloError(err.message, 400);
      }
    },
    editEmployeeByID: async (_, { editEmployeeByID, id }, { req }, info) => {
      try {
        //check req has "Authorize"
        //req.admin
        if (!req.isAuth) throw new Error(`U must be login`);
        let editData = await Employee.findByIdAndUpdate(
          { _id: id },
          { ...editEmployeeByID },
          { new: true }
        );
        return editData;
        // }
      } catch (err) {
        throw new ApolloError(err.message, 400);
      }
    },
    deleteEmployee: async (_, { id }, { req }, info) => {
      try {
        //check req has "Authorize"
        //req.admin
        if (!req.isAuth) throw new Error(`U must be login`);
        if (!req.admin)
          throw new Error(`U dont have permission to do this action`);
        let deleteEmployee = await Employee.findByIdAndDelete({ _id: id });
        if (deleteEmployee) {
          return {
            id,
            message: " Delete successfully !",
            success: true,
          };
        } else {
          throw new Error("Delete failed ");
        }
        // }
      } catch (err) {
        throw new Error("Error delete");
      }
    },
  },
});
